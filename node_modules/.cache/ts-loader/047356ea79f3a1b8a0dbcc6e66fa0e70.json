{"remainingRequest":"/home/git/homestorage/homeweb/node_modules/babel-loader/lib/index.js!/home/git/homestorage/homeweb/node_modules/ts-loader/index.js??ref--13-2!/home/git/homestorage/homeweb/src/homestorage/module/mutations.ts","dependencies":[{"path":"/home/git/homestorage/homeweb/src/homestorage/module/mutations.ts","mtime":1586434586906},{"path":"/home/git/homestorage/homeweb/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/git/homestorage/homeweb/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/git/homestorage/homeweb/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.function.name\";\nimport { pathStringsToTreeStructure } from \"../utils/treeUtils\";\nexport var mutations = {\n  containersLoaded: function containersLoaded(state, containers) {\n    state.containers = containers;\n  },\n  blobsByContainerLoaded: function blobsByContainerLoaded(state, blobs) {\n    state.blobsByContainer = blobs;\n\n    if (blobs.blobs.length < 1) {\n      state.blobsByContainerTree = {};\n    }\n\n    var strs = blobs.blobs.map(function (b) {\n      return b.name;\n    });\n    var tree = pathStringsToTreeStructure(strs);\n    state.blobsByContainerTree = {\n      name: blobs.containerName,\n      fullPath: \"\",\n      children: tree\n    };\n  },\n  activeBlobSet: function activeBlobSet(state, name) {\n    if (state.activeBlob && state.activeBlob.name === name) {\n      state.activeBlob = null;\n    } else {\n      var blob = state.blobsByContainer.blobs.find(function (b) {\n        return b.name === name;\n      });\n\n      if (blob) {\n        state.activeBlob = blob;\n      }\n    }\n  }\n};",{"version":3,"sources":["/home/git/homestorage/homeweb/src/homestorage/module/mutations.ts"],"names":[],"mappings":";;AAKA,SAAS,0BAAT;AAEA,OAAO,IAAM,SAAS,GAAmC;AACrD,EAAA,gBADqD,4BACpC,KADoC,EAC7B,UAD6B,EACF;AAC/C,IAAA,KAAK,CAAC,UAAN,GAAmB,UAAnB;AACH,GAHoD;AAIrD,EAAA,sBAJqD,kCAI9B,KAJ8B,EAIvB,KAJuB,EAIC;AAClD,IAAA,KAAK,CAAC,gBAAN,GAAyB,KAAzB;;AACA,QAAI,KAAK,CAAC,KAAN,CAAY,MAAZ,GAAqB,CAAzB,EAA4B;AACxB,MAAA,KAAK,CAAC,oBAAN,GAA6B,EAA7B;AACH;;AACD,QAAM,IAAI,GAAa,KAAK,CAAC,KAAN,CAAY,GAAZ,CAAgB,UAAC,CAAD;AAAA,aAAY,CAAC,CAAC,IAAd;AAAA,KAAhB,CAAvB;AACA,QAAM,IAAI,GAAG,0BAA0B,CAAC,IAAD,CAAvC;AACA,IAAA,KAAK,CAAC,oBAAN,GAA6B;AACzB,MAAA,IAAI,EAAE,KAAK,CAAC,aADa;AAEzB,MAAA,QAAQ,EAAE,EAFe;AAGzB,MAAA,QAAQ,EAAE;AAHe,KAA7B;AAKH,GAhBoD;AAiBrD,EAAA,aAjBqD,yBAiBvC,KAjBuC,EAiBhC,IAjBgC,EAiBpB;AAC7B,QAAI,KAAK,CAAC,UAAN,IAAoB,KAAK,CAAC,UAAN,CAAiB,IAAjB,KAA0B,IAAlD,EAAwD;AACpD,MAAA,KAAK,CAAC,UAAN,GAAmB,IAAnB;AACH,KAFD,MAEO;AACH,UAAM,IAAI,GAAG,KAAK,CAAC,gBAAN,CAAuB,KAAvB,CAA6B,IAA7B,CAAkC,UAAC,CAAD;AAAA,eAAO,CAAC,CAAC,IAAF,KAAW,IAAlB;AAAA,OAAlC,CAAb;;AACA,UAAI,IAAJ,EAAU;AAAE,QAAA,KAAK,CAAC,UAAN,GAAmB,IAAnB;AAA0B;AACzC;AACJ;AAxBoD,CAAlD","sourcesContent":["import { MutationTree } from \"vuex\";\r\nimport HomeStorageState, { IBlobsByContainer } from \"./homeStorageState\";\r\n\r\nimport { ContainerItem } from \"@azure/storage-blob/typings/src/generated/src/models\";\r\n\r\nimport { pathStringsToTreeStructure } from \"../utils/treeUtils\";\r\n\r\nexport const mutations: MutationTree<HomeStorageState> = {\r\n    containersLoaded(state, containers: ContainerItem[]) {\r\n        state.containers = containers;\r\n    },\r\n    blobsByContainerLoaded(state, blobs: IBlobsByContainer) {\r\n        state.blobsByContainer = blobs;\r\n        if (blobs.blobs.length < 1) {\r\n            state.blobsByContainerTree = {};\r\n        }\r\n        const strs: string[] = blobs.blobs.map((b: any) => b.name);\r\n        const tree = pathStringsToTreeStructure(strs);\r\n        state.blobsByContainerTree = {\r\n            name: blobs.containerName,\r\n            fullPath: \"\",\r\n            children: tree,\r\n        };\r\n    },\r\n    activeBlobSet(state, name: string) {\r\n        if (state.activeBlob && state.activeBlob.name === name) {\r\n            state.activeBlob = null;\r\n        } else {\r\n            const blob = state.blobsByContainer.blobs.find((b) => b.name === name);\r\n            if (blob) { state.activeBlob = blob; }\r\n        }\r\n    },\r\n};\r\n"],"sourceRoot":""}]}