{"remainingRequest":"/home/git/homestorage/homeweb/node_modules/babel-loader/lib/index.js!/home/git/homestorage/homeweb/node_modules/ts-loader/index.js??ref--13-2!/home/git/homestorage/homeweb/src/homestorage/module/actions.ts","dependencies":[{"path":"/home/git/homestorage/homeweb/src/homestorage/module/actions.ts","mtime":1586434586906},{"path":"/home/git/homestorage/homeweb/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/git/homestorage/homeweb/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/git/homestorage/homeweb/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/git/homestorage/homeweb/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _getContainers from \"@/azure/getContainers\";\nimport _getBlobsByContainer from \"@/azure/getBlobsByContainer\";\nimport _createFolder from \"@/azure/createFolder\";\nimport { uploadFileWithCallback } from \"@/azure/uploadFile\";\nimport copyBlob from \"@/azure/copyBlob\";\nimport deleteBlob from \"@/azure/deleteBlob\";\nexport var actions = {\n  getContainers: function () {\n    var _getContainers2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref) {\n      var commit, containers;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              _context.prev = 1;\n              _context.next = 4;\n              return _getContainers();\n\n            case 4:\n              containers = _context.sent;\n              commit(\"containersLoaded\", containers);\n              return _context.abrupt(\"return\", 200);\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](1);\n              return _context.abrupt(\"return\", 500);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 9]]);\n    }));\n\n    function getContainers(_x) {\n      return _getContainers2.apply(this, arguments);\n    }\n\n    return getContainers;\n  }(),\n  getBlobsByContainer: function () {\n    var _getBlobsByContainer2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_ref2, containerName) {\n      var commit, blobs;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref2.commit;\n              _context2.prev = 1;\n              _context2.t0 = containerName;\n              _context2.next = 5;\n              return _getBlobsByContainer(containerName);\n\n            case 5:\n              _context2.t1 = _context2.sent;\n              blobs = {\n                containerName: _context2.t0,\n                blobs: _context2.t1\n              };\n              commit(\"blobsByContainerLoaded\", blobs);\n              return _context2.abrupt(\"return\", 200);\n\n            case 11:\n              _context2.prev = 11;\n              _context2.t2 = _context2[\"catch\"](1);\n              return _context2.abrupt(\"return\", 500);\n\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 11]]);\n    }));\n\n    function getBlobsByContainer(_x2, _x3) {\n      return _getBlobsByContainer2.apply(this, arguments);\n    }\n\n    return getBlobsByContainer;\n  }(),\n  createFolder: function () {\n    var _createFolder2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(_, p) {\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _context3.next = 3;\n              return _createFolder(p.containerName, p.folderName);\n\n            case 3:\n              return _context3.abrupt(\"return\", 200);\n\n            case 6:\n              _context3.prev = 6;\n              _context3.t0 = _context3[\"catch\"](0);\n              return _context3.abrupt(\"return\", 500);\n\n            case 9:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[0, 6]]);\n    }));\n\n    function createFolder(_x4, _x5) {\n      return _createFolder2.apply(this, arguments);\n    }\n\n    return createFolder;\n  }(),\n  uploadFile: function () {\n    var _uploadFile = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(_, p) {\n      var isUploaded;\n      return regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              _context4.next = 3;\n              return uploadFileWithCallback(p.containerName, p.fileName, p.file, p.cb);\n\n            case 3:\n              isUploaded = _context4.sent;\n              return _context4.abrupt(\"return\", isUploaded);\n\n            case 7:\n              _context4.prev = 7;\n              _context4.t0 = _context4[\"catch\"](0);\n              return _context4.abrupt(\"return\", 500);\n\n            case 10:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[0, 7]]);\n    }));\n\n    function uploadFile(_x6, _x7) {\n      return _uploadFile.apply(this, arguments);\n    }\n\n    return uploadFile;\n  }(),\n  renameFile: function () {\n    var _renameFile = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(_, p) {\n      return regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.prev = 0;\n              _context5.next = 3;\n              return copyBlob(p.containerName, p.oldName, p.newName);\n\n            case 3:\n              _context5.next = 5;\n              return deleteBlob(p.containerName, p.oldName);\n\n            case 5:\n              return _context5.abrupt(\"return\", 200);\n\n            case 8:\n              _context5.prev = 8;\n              _context5.t0 = _context5[\"catch\"](0);\n              return _context5.abrupt(\"return\", 500);\n\n            case 11:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, null, [[0, 8]]);\n    }));\n\n    function renameFile(_x8, _x9) {\n      return _renameFile.apply(this, arguments);\n    }\n\n    return renameFile;\n  }(),\n  deleteFile: function () {\n    var _deleteFile = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(_, p) {\n      return regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.prev = 0;\n              _context6.next = 3;\n              return deleteBlob(p.containerName, p.name);\n\n            case 3:\n              return _context6.abrupt(\"return\", 200);\n\n            case 6:\n              _context6.prev = 6;\n              _context6.t0 = _context6[\"catch\"](0);\n              return _context6.abrupt(\"return\", 500);\n\n            case 9:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, null, [[0, 6]]);\n    }));\n\n    function deleteFile(_x10, _x11) {\n      return _deleteFile.apply(this, arguments);\n    }\n\n    return deleteFile;\n  }(),\n  setActiveBlob: function setActiveBlob(_ref3, name) {\n    var commit = _ref3.commit;\n\n    if (name) {\n      commit(\"activeBlobSet\", name);\n    }\n  }\n};",{"version":3,"sources":["/home/git/homestorage/homeweb/src/homestorage/module/actions.ts"],"names":[],"mappings":"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","sourcesContent":["import { ActionTree } from \"vuex\";\r\nimport RootState from \"../../store/rootState\";\r\nimport HomeStorageState, { IBlobsByContainer } from \"./homeStorageState\";\r\n\r\nimport getContainers from \"@/azure/getContainers\";\r\nimport getBlobsByContainer from \"@/azure/getBlobsByContainer\";\r\nimport createFolder from \"@/azure/createFolder\";\r\nimport { uploadFileWithCallback } from \"@/azure/uploadFile\";\r\nimport { TransferProgressEvent } from \"@azure/ms-rest-js\";\r\nimport copyBlob from \"@/azure/copyBlob\";\r\nimport deleteBlob from \"@/azure/deleteBlob\";\r\n\r\nexport const actions: ActionTree<HomeStorageState, RootState> = {\r\n    async getContainers({ commit }): Promise<number> {\r\n        try {\r\n            const containers = await getContainers();\r\n            commit(\"containersLoaded\", containers);\r\n\r\n            return 200;\r\n        } catch (error) {\r\n            return 500;\r\n        }\r\n    },\r\n    async getBlobsByContainer({ commit }, containerName: string): Promise<number> {\r\n        try {\r\n            const blobs: IBlobsByContainer = {\r\n                containerName,\r\n                blobs: await getBlobsByContainer(containerName),\r\n            };\r\n            commit(\"blobsByContainerLoaded\", blobs);\r\n\r\n            return 200;\r\n        } catch (error) {\r\n            return 500;\r\n        }\r\n    },\r\n    async createFolder(_, p: { containerName: string, folderName: string }): Promise<number> {\r\n        try {\r\n            await createFolder(p.containerName, p.folderName);\r\n\r\n            return 200;\r\n        } catch (error) {\r\n            return 500;\r\n        }\r\n    },\r\n    async uploadFile(\r\n        _,\r\n        p: {\r\n            containerName: string,\r\n            fileName: string,\r\n            file: File,\r\n            cb: (e: TransferProgressEvent) => void,\r\n        }): Promise<number> {\r\n        try {\r\n            const isUploaded = await uploadFileWithCallback(p.containerName, p.fileName, p.file, p.cb);\r\n\r\n            return isUploaded;\r\n        } catch (error) {\r\n            return 500;\r\n        }\r\n    },\r\n    async renameFile(_, p: { containerName: string, oldName: string, newName: string }): Promise<number> {\r\n        try {\r\n            await copyBlob(p.containerName, p.oldName, p.newName);\r\n            await deleteBlob(p.containerName, p.oldName);\r\n            return 200;\r\n        } catch (error) {\r\n            return 500;\r\n        }\r\n    },\r\n    async deleteFile(_, p: { containerName: string, name: string }): Promise<number> {\r\n        try {\r\n            await deleteBlob(p.containerName, p.name);\r\n            return 200;\r\n        } catch (error) {\r\n            return 500;\r\n        }\r\n    },\r\n    setActiveBlob({ commit }, name: string) {\r\n        if (name) { commit(\"activeBlobSet\", name); }\r\n    },\r\n};\r\n"],"sourceRoot":""}]}