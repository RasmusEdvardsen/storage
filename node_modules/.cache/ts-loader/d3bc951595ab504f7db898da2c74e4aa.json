{"remainingRequest":"/home/git/homestorage/homeweb/node_modules/babel-loader/lib/index.js!/home/git/homestorage/homeweb/node_modules/ts-loader/index.js??ref--13-2!/home/git/homestorage/homeweb/src/azure/getContainers.ts","dependencies":[{"path":"/home/git/homestorage/homeweb/src/azure/getContainers.ts","mtime":1586434586906},{"path":"/home/git/homestorage/homeweb/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/git/homestorage/homeweb/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/git/homestorage/homeweb/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/git/homestorage/homeweb/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(n); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { Aborter } from \"@azure/storage-blob\";\nimport getServiceUrl from \"./serviceUrl\";\nexport default function getContainers() {\n  return _getContainers.apply(this, arguments);\n}\n\nfunction _getContainers() {\n  _getContainers = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n    var serviceURL, containers, marker, listContainersResponse, _iterator, _step, container;\n\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return getServiceUrl();\n\n          case 3:\n            serviceURL = _context.sent;\n            containers = [];\n            marker = \"\";\n\n          case 6:\n            _context.next = 8;\n            return serviceURL.listContainersSegment(Aborter.none, marker);\n\n          case 8:\n            listContainersResponse = _context.sent;\n            marker = listContainersResponse.nextMarker;\n            _iterator = _createForOfIteratorHelper(listContainersResponse.containerItems);\n\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                container = _step.value;\n                containers.push(container);\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n\n          case 12:\n            if (marker) {\n              _context.next = 6;\n              break;\n            }\n\n          case 13:\n            return _context.abrupt(\"return\", containers);\n\n          case 16:\n            _context.prev = 16;\n            _context.t0 = _context[\"catch\"](0);\n            return _context.abrupt(\"return\", []);\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 16]]);\n  }));\n  return _getContainers.apply(this, arguments);\n}",{"version":3,"sources":["/home/git/homestorage/homeweb/src/azure/getContainers.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,SAEI,OAFJ,QAGO,qBAHP;AASA,OAAO,aAAP;AAEA,wBAA8B,aAA9B;AAAA;AAAA;;;2EAAe;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAE8B,aAAa,EAF3C;;AAAA;AAED,YAAA,UAFC;AAID,YAAA,UAJC,GAI6B,EAJ7B;AAKH,YAAA,MALG,GAK0B,EAL1B;;AAAA;AAAA;AAAA,mBAOwE,UAAU,CAAC,qBAAX,CACvE,OAAO,CAAC,IAD+D,EAEvE,MAFuE,CAPxE;;AAAA;AAOG,YAAA,sBAPH;AAYH,YAAA,MAAM,GAAG,sBAAsB,CAAC,UAAhC;AAZG,mDAaqB,sBAAsB,CAAC,cAb5C;;AAAA;AAaH,kEAA+D;AAApD,gBAAA,SAAoD;AAC3D,gBAAA,UAAU,CAAC,IAAX,CAAgB,SAAhB;AACH;AAfE;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,gBAgBE,MAhBF;AAAA;AAAA;AAAA;;AAAA;AAAA,6CAkBA,UAlBA;;AAAA;AAAA;AAAA;AAAA,6CAoBA,EApBA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import {\r\n    ServiceURL,\r\n    Aborter,\r\n} from \"@azure/storage-blob\";\r\nimport {\r\n    ServiceListContainersSegmentResponse,\r\n    ContainerItem,\r\n} from \"@azure/storage-blob/typings/src/generated/src/models\";\r\n\r\nimport getServiceUrl from \"./serviceUrl\";\r\n\r\nexport default async function getContainers(): Promise<ContainerItem[]> {\r\n    try {\r\n        const serviceURL: ServiceURL = await getServiceUrl();\r\n\r\n        const containers: ContainerItem[] = [];\r\n        let marker: string | undefined = \"\";\r\n        do {\r\n            const listContainersResponse: ServiceListContainersSegmentResponse = await serviceURL.listContainersSegment(\r\n                Aborter.none,\r\n                marker,\r\n            );\r\n\r\n            marker = listContainersResponse.nextMarker;\r\n            for (const container of listContainersResponse.containerItems) {\r\n                containers.push(container);\r\n            }\r\n        } while (marker);\r\n\r\n        return containers;\r\n    } catch (error) {\r\n        return [];\r\n    }\r\n}\r\n"],"sourceRoot":""}]}