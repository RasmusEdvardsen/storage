{"remainingRequest":"/home/git/homestorage/homeweb/node_modules/babel-loader/lib/index.js!/home/git/homestorage/homeweb/node_modules/ts-loader/index.js??ref--13-2!/home/git/homestorage/homeweb/src/azure/getBlobsByContainer.ts","dependencies":[{"path":"/home/git/homestorage/homeweb/src/azure/getBlobsByContainer.ts","mtime":1586434586906},{"path":"/home/git/homestorage/homeweb/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/git/homestorage/homeweb/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/git/homestorage/homeweb/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/git/homestorage/homeweb/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(n); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { ContainerURL, Aborter } from \"@azure/storage-blob\";\nimport getServiceUrl from \"./serviceUrl\";\nexport default function getBlobsByContainer(_x) {\n  return _getBlobsByContainer.apply(this, arguments);\n}\n\nfunction _getBlobsByContainer() {\n  _getBlobsByContainer = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(containerName) {\n    var blobItems, serviceURL, containerURL, marker, listBlobsResponse, _iterator, _step, blob;\n\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            blobItems = [];\n            _context.prev = 1;\n            _context.next = 4;\n            return getServiceUrl();\n\n          case 4:\n            serviceURL = _context.sent;\n            containerURL = ContainerURL.fromServiceURL(serviceURL, containerName);\n            marker = \"\";\n\n          case 7:\n            _context.next = 9;\n            return containerURL.listBlobFlatSegment(Aborter.none, marker);\n\n          case 9:\n            listBlobsResponse = _context.sent;\n            marker = listBlobsResponse.nextMarker;\n            _iterator = _createForOfIteratorHelper(listBlobsResponse.segment.blobItems);\n\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                blob = _step.value;\n                blobItems.push(blob);\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n\n          case 13:\n            if (marker) {\n              _context.next = 7;\n              break;\n            }\n\n          case 14:\n            return _context.abrupt(\"return\", blobItems);\n\n          case 17:\n            _context.prev = 17;\n            _context.t0 = _context[\"catch\"](1);\n            return _context.abrupt(\"return\", blobItems);\n\n          case 20:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 17]]);\n  }));\n  return _getBlobsByContainer.apply(this, arguments);\n}",{"version":3,"sources":["/home/git/homestorage/homeweb/src/azure/getBlobsByContainer.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,SAEI,YAFJ,EAGI,OAHJ,QAIO,qBAJP;AASA,OAAO,aAAP;AAEA,wBAA8B,mBAA9B;AAAA;AAAA;;;iFAAe,iBAAmC,aAAnC;AAAA;;AAAA;AAAA;AAAA;AAAA;AACL,YAAA,SADK,GACmB,EADnB;AAAA;AAAA;AAAA,mBAG8B,aAAa,EAH3C;;AAAA;AAGD,YAAA,UAHC;AAKD,YAAA,YALC,GAKc,YAAY,CAAC,cAAb,CAA4B,UAA5B,EAAwC,aAAxC,CALd;AAOH,YAAA,MAPG,GAO0B,EAP1B;;AAAA;AAAA;AAAA,mBASmE,YAAY,CAAC,mBAAb,CACtE,OAAO,CAAC,IAD8D,EAEtE,MAFsE,CATnE;;AAAA;AASG,YAAA,iBATH;AAcH,YAAA,MAAM,GAAG,iBAAiB,CAAC,UAA3B;AAdG,mDAegB,iBAAiB,CAAC,OAAlB,CAA0B,SAf1C;;AAAA;AAeH,kEAAwD;AAA7C,gBAAA,IAA6C;AACpD,gBAAA,SAAS,CAAC,IAAV,CAAe,IAAf;AACH;AAjBE;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,gBAkBE,MAlBF;AAAA;AAAA;AAAA;;AAAA;AAAA,6CAoBA,SApBA;;AAAA;AAAA;AAAA;AAAA,6CAsBA,SAtBA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import {\r\n    ServiceURL,\r\n    ContainerURL,\r\n    Aborter,\r\n} from \"@azure/storage-blob\";\r\nimport {\r\n    BlobItem,\r\n    ContainerListBlobFlatSegmentResponse,\r\n} from \"@azure/storage-blob/typings/src/generated/src/models\";\r\nimport getServiceUrl from \"./serviceUrl\";\r\n\r\nexport default async function getBlobsByContainer(containerName: string): Promise<BlobItem[]> {\r\n    const blobItems: BlobItem[] = [];\r\n    try {\r\n        const serviceURL: ServiceURL = await getServiceUrl();\r\n\r\n        const containerURL = ContainerURL.fromServiceURL(serviceURL, containerName);\r\n\r\n        let marker: string | undefined = \"\";\r\n        do {\r\n            const listBlobsResponse: ContainerListBlobFlatSegmentResponse = await containerURL.listBlobFlatSegment(\r\n            Aborter.none,\r\n            marker,\r\n            );\r\n\r\n            marker = listBlobsResponse.nextMarker;\r\n            for (const blob of listBlobsResponse.segment.blobItems) {\r\n                blobItems.push(blob);\r\n            }\r\n        } while (marker);\r\n\r\n        return blobItems;\r\n    } catch (error) {\r\n        return blobItems;\r\n    }\r\n}\r\n"],"sourceRoot":""}]}