{"remainingRequest":"/home/git/homestorage/homeweb/node_modules/babel-loader/lib/index.js!/home/git/homestorage/homeweb/node_modules/ts-loader/index.js??ref--13-2!/home/git/homestorage/homeweb/src/log/log.ts","dependencies":[{"path":"/home/git/homestorage/homeweb/src/log/log.ts","mtime":1586434586906},{"path":"/home/git/homestorage/homeweb/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/git/homestorage/homeweb/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/git/homestorage/homeweb/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport _asyncToGenerator from \"/home/git/homestorage/homeweb/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport { BlobURL, BlockBlobURL, Aborter, ContainerURL } from \"@azure/storage-blob\";\nimport getServiceUrl from \"@/azure/serviceUrl\";\n\nfunction toStorage(_x, _x2, _x3) {\n  return _toStorage.apply(this, arguments);\n}\n\nfunction _toStorage() {\n  _toStorage = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(containerName, fileName, log) {\n    var serviceURL, containerURL, blobURL, blockBlobURL, uploadBlobResponse;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return getServiceUrl();\n\n          case 2:\n            serviceURL = _context.sent;\n            containerURL = ContainerURL.fromServiceURL(serviceURL, containerName);\n            blobURL = BlobURL.fromContainerURL(containerURL, fileName);\n            blockBlobURL = BlockBlobURL.fromBlobURL(blobURL);\n            _context.next = 8;\n            return blockBlobURL.upload(Aborter.none, log, log.length, {\n              blobHTTPHeaders: {\n                blobContentType: \"text/plain\"\n              }\n            });\n\n          case 8:\n            uploadBlobResponse = _context.sent;\n            return _context.abrupt(\"return\", uploadBlobResponse._response.status);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _toStorage.apply(this, arguments);\n}\n\nexport function info(_x4) {\n  return _info.apply(this, arguments);\n}\n\nfunction _info() {\n  _info = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(i) {\n    var date, dateFormatted;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            date = new Date();\n            dateFormatted = formatDateForLog(date);\n            toStorage(\"log\", \"info/\" + dateFormatted, i);\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _info.apply(this, arguments);\n}\n\nexport function error(_x5) {\n  return _error.apply(this, arguments);\n}\n/**\n * Prepends a 0 to n if n is less than 10, and returns that as a string.\n */\n\nfunction _error() {\n  _error = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(err) {\n    var date, dateFormatted;\n    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            date = new Date();\n            dateFormatted = formatDateForLog(date);\n            toStorage(\"log\", \"error/\" + dateFormatted, err);\n\n          case 3:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _error.apply(this, arguments);\n}\n\nfunction prependZero(n) {\n  return n < 10 ? \"0\" + n : \"\" + n;\n}\n\nfunction formatDateForLog(date) {\n  var formatted = date.getFullYear().toString() + \"_\" + prependZero(date.getMonth()) + \"_\" + prependZero(date.getDate()) + \"-\" + prependZero(date.getHours()) + \":\" + prependZero(date.getMinutes()) + \":\" + prependZero(date.getSeconds()) + \"m\" + prependZero(date.getMilliseconds());\n  return formatted;\n}",{"version":3,"sources":["/home/git/homestorage/homeweb/src/log/log.ts"],"names":[],"mappings":";;;AAAA,SACI,OADJ,EAEI,YAFJ,EAGI,OAHJ,EAII,YAJJ,QAMO,qBANP;AAOA,OAAO,aAAP,MAA0B,oBAA1B;;SAEe,S;;;;;uEAAf,iBACI,aADJ,EAEI,QAFJ,EAGI,GAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAKyC,aAAa,EALtD;;AAAA;AAKU,YAAA,UALV;AAOU,YAAA,YAPV,GAOyB,YAAY,CAAC,cAAb,CAA4B,UAA5B,EAAwC,aAAxC,CAPzB;AAQU,YAAA,OARV,GAQoB,OAAO,CAAC,gBAAR,CAAyB,YAAzB,EAAuC,QAAvC,CARpB;AASU,YAAA,YATV,GASyB,YAAY,CAAC,WAAb,CAAyB,OAAzB,CATzB;AAAA;AAAA,mBAUqC,YAAY,CAAC,MAAb,CAC7B,OAAO,CAAC,IADqB,EAE7B,GAF6B,EAG7B,GAAG,CAAC,MAHyB,EAI7B;AAAE,cAAA,eAAe,EAAE;AAAE,gBAAA,eAAe,EAAE;AAAnB;AAAnB,aAJ6B,CAVrC;;AAAA;AAUU,YAAA,kBAVV;AAAA,6CAiBW,kBAAkB,CAAC,SAAnB,CAA6B,MAjBxC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAmBA,gBAAsB,IAAtB;AAAA;AAAA;;;kEAAO,kBAAoB,CAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AACG,YAAA,IADH,GACU,IAAI,IAAJ,EADV;AAEG,YAAA,aAFH,GAEmB,gBAAgB,CAAC,IAAD,CAFnC;AAGH,YAAA,SAAS,CAAC,KAAD,EAAQ,UAAU,aAAlB,EAAiC,CAAjC,CAAT;;AAHG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAMP,gBAAsB,KAAtB;AAAA;AAAA;AAMA;;;;;mEANO,kBAAqB,GAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AACG,YAAA,IADH,GACU,IAAI,IAAJ,EADV;AAEG,YAAA,aAFH,GAEmB,gBAAgB,CAAC,IAAD,CAFnC;AAGH,YAAA,SAAS,CAAC,KAAD,EAAQ,WAAW,aAAnB,EAAkC,GAAlC,CAAT;;AAHG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AASP,SAAS,WAAT,CAAqB,CAArB,EAA8B;AAAY,SAAO,CAAC,GAAG,EAAJ,GAAS,MAAM,CAAf,GAAmB,KAAK,CAA/B;AAAmC;;AAE7E,SAAS,gBAAT,CAA0B,IAA1B,EAAoC;AAChC,MAAM,SAAS,GACX,IAAI,CAAC,WAAL,GAAmB,QAAnB,KACE,GADF,GACQ,WAAW,CAAC,IAAI,CAAC,QAAL,EAAD,CADnB,GAEE,GAFF,GAEQ,WAAW,CAAC,IAAI,CAAC,OAAL,EAAD,CAFnB,GAGE,GAHF,GAGQ,WAAW,CAAC,IAAI,CAAC,QAAL,EAAD,CAHnB,GAIE,GAJF,GAIQ,WAAW,CAAC,IAAI,CAAC,UAAL,EAAD,CAJnB,GAKE,GALF,GAKQ,WAAW,CAAC,IAAI,CAAC,UAAL,EAAD,CALnB,GAME,GANF,GAMQ,WAAW,CAAC,IAAI,CAAC,eAAL,EAAD,CAPvB;AAQA,SAAO,SAAP;AACH","sourcesContent":["import {\r\n    BlobURL,\r\n    BlockBlobURL,\r\n    Aborter,\r\n    ContainerURL,\r\n    ServiceURL,\r\n} from \"@azure/storage-blob\";\r\nimport getServiceUrl from \"@/azure/serviceUrl\";\r\n\r\nasync function toStorage(\r\n    containerName: string,\r\n    fileName: string,\r\n    log: string,\r\n): Promise<number> {\r\n    const serviceURL: ServiceURL = await getServiceUrl();\r\n\r\n    const containerURL = ContainerURL.fromServiceURL(serviceURL, containerName);\r\n    const blobURL = BlobURL.fromContainerURL(containerURL, fileName);\r\n    const blockBlobURL = BlockBlobURL.fromBlobURL(blobURL);\r\n    const uploadBlobResponse = await blockBlobURL.upload(\r\n        Aborter.none,\r\n        log,\r\n        log.length,\r\n        { blobHTTPHeaders: { blobContentType: \"text/plain\" } },\r\n    );\r\n\r\n    return uploadBlobResponse._response.status;\r\n}\r\nexport async function info(i: string): Promise<void> {\r\n    const date = new Date();\r\n    const dateFormatted = formatDateForLog(date);\r\n    toStorage(\"log\", \"info/\" + dateFormatted, i);\r\n}\r\n\r\nexport async function error(err: string): Promise<void> {\r\n    const date = new Date();\r\n    const dateFormatted = formatDateForLog(date);\r\n    toStorage(\"log\", \"error/\" + dateFormatted, err);\r\n}\r\n\r\n/**\r\n * Prepends a 0 to n if n is less than 10, and returns that as a string.\r\n */\r\nfunction prependZero(n: number): string { return n < 10 ? \"0\" + n : \"\" + n; }\r\n\r\nfunction formatDateForLog(date: Date): string {\r\n    const formatted =\r\n        date.getFullYear().toString()\r\n        + \"_\" + prependZero(date.getMonth())\r\n        + \"_\" + prependZero(date.getDate())\r\n        + \"-\" + prependZero(date.getHours())\r\n        + \":\" + prependZero(date.getMinutes())\r\n        + \":\" + prependZero(date.getSeconds())\r\n        + \"m\" + prependZero(date.getMilliseconds());\r\n    return formatted;\r\n}\r\n"],"sourceRoot":""}]}