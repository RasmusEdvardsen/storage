{"remainingRequest":"/home/git/homestorage/homeweb/node_modules/babel-loader/lib/index.js!/home/git/homestorage/homeweb/node_modules/ts-loader/index.js??ref--13-2!/home/git/homestorage/homeweb/src/homestorage/utils/treeUtils.ts","dependencies":[{"path":"/home/git/homestorage/homeweb/src/homestorage/utils/treeUtils.ts","mtime":1586434586906},{"path":"/home/git/homestorage/homeweb/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/git/homestorage/homeweb/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/git/homestorage/homeweb/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.regexp.split\";\nimport uuid from \"uuid\";\nexport function pathStringsToTreeStructure(paths) {\n  var parentFullPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n  var filtered = paths.reduce(function (acc, curr) {\n    if (curr.indexOf(\"/\") !== -1) {\n      var pathArr = curr.split(\"/\");\n      var firstPath = pathArr[0];\n\n      if (acc.find(function (c) {\n        return c.name === firstPath;\n      })) {\n        acc.find(function (c) {\n          return c.name === firstPath;\n        }).children.push(pathArr.slice(1).join(\"/\"));\n      } else {\n        acc.push({\n          id: uuid.v4(),\n          name: firstPath,\n          fullPath: parentFullPath.length > 0 ? parentFullPath + \"/\" + firstPath : firstPath,\n          children: [pathArr.slice(1).join(\"/\")]\n        });\n      }\n    } else if (curr.indexOf(\".\") !== -1) {\n      acc.push({\n        id: uuid.v4(),\n        name: curr,\n        fullPath: parentFullPath.length > 0 ? parentFullPath + \"/\" + curr : curr\n      });\n    }\n\n    return acc;\n  }, []);\n\n  for (var key in filtered) {\n    if (filtered.hasOwnProperty(key)) {\n      var child = filtered[key];\n\n      if (Object.keys(child).includes(\"children\")) {\n        child.children = pathStringsToTreeStructure(child.children, child.fullPath);\n      }\n    }\n  }\n\n  return filtered;\n}",{"version":3,"sources":["/home/git/homestorage/homeweb/src/homestorage/utils/treeUtils.ts"],"names":[],"mappings":";;;;;;;AAAA,OAAO,IAAP,MAAiB,MAAjB;AAEA,OAAM,SAAU,0BAAV,CAAqC,KAArC,EAAiF;AAAA,MAA3B,cAA2B,uEAAF,EAAE;AACnF,MAAM,QAAQ,GAAQ,KAAK,CAAC,MAAN,CAAa,UAAC,GAAD,EAAW,IAAX,EAA2B;AAC1D,QAAI,IAAI,CAAC,OAAL,CAAa,GAAb,MAAsB,CAAC,CAA3B,EAA8B;AAC1B,UAAM,OAAO,GAAG,IAAI,CAAC,KAAL,CAAW,GAAX,CAAhB;AACA,UAAM,SAAS,GAAG,OAAO,CAAC,CAAD,CAAzB;;AACA,UAAI,GAAG,CAAC,IAAJ,CAAS,UAAC,CAAD;AAAA,eAAY,CAAC,CAAC,IAAF,KAAW,SAAvB;AAAA,OAAT,CAAJ,EAAgD;AAC5C,QAAA,GAAG,CAAC,IAAJ,CAAS,UAAC,CAAD;AAAA,iBAAY,CAAC,CAAC,IAAF,KAAW,SAAvB;AAAA,SAAT,EAA2C,QAA3C,CAAoD,IAApD,CAAyD,OAAO,CAAC,KAAR,CAAc,CAAd,EAAiB,IAAjB,CAAsB,GAAtB,CAAzD;AACH,OAFD,MAEO;AACH,QAAA,GAAG,CAAC,IAAJ,CAAS;AACL,UAAA,EAAE,EAAE,IAAI,CAAC,EAAL,EADC;AAEL,UAAA,IAAI,EAAE,SAFD;AAGL,UAAA,QAAQ,EAAE,cAAc,CAAC,MAAf,GAAwB,CAAxB,GAA6B,cAAc,GAAG,GAAjB,GAAuB,SAApD,GAAiE,SAHtE;AAIL,UAAA,QAAQ,EAAE,CACN,OAAO,CAAC,KAAR,CAAc,CAAd,EAAiB,IAAjB,CAAsB,GAAtB,CADM;AAJL,SAAT;AAQH;AACJ,KAfD,MAeO,IAAI,IAAI,CAAC,OAAL,CAAa,GAAb,MAAsB,CAAC,CAA3B,EAA8B;AACjC,MAAA,GAAG,CAAC,IAAJ,CAAS;AACL,QAAA,EAAE,EAAE,IAAI,CAAC,EAAL,EADC;AAEL,QAAA,IAAI,EAAE,IAFD;AAGL,QAAA,QAAQ,EAAE,cAAc,CAAC,MAAf,GAAwB,CAAxB,GAA6B,cAAc,GAAG,GAAjB,GAAuB,IAApD,GAA4D;AAHjE,OAAT;AAKH;;AACD,WAAO,GAAP;AACH,GAxBqB,EAwBnB,EAxBmB,CAAtB;;AAyBA,OAAK,IAAM,GAAX,IAAkB,QAAlB,EAA4B;AACxB,QAAI,QAAQ,CAAC,cAAT,CAAwB,GAAxB,CAAJ,EAAkC;AAC9B,UAAM,KAAK,GAAG,QAAQ,CAAC,GAAD,CAAtB;;AACA,UAAI,MAAM,CAAC,IAAP,CAAY,KAAZ,EAAmB,QAAnB,CAA4B,UAA5B,CAAJ,EAA6C;AACzC,QAAA,KAAK,CAAC,QAAN,GAAiB,0BAA0B,CAAC,KAAK,CAAC,QAAP,EAAiB,KAAK,CAAC,QAAvB,CAA3C;AACH;AACJ;AACJ;;AACD,SAAO,QAAP;AACH","sourcesContent":["import uuid from \"uuid\";\n\nexport function pathStringsToTreeStructure(paths: string[], parentFullPath: string = \"\") {\n    const filtered: any = paths.reduce((acc: any, curr: string) => {\n        if (curr.indexOf(\"/\") !== -1) {\n            const pathArr = curr.split(\"/\");\n            const firstPath = pathArr[0];\n            if (acc.find((c: any) => c.name === firstPath)) {\n                acc.find((c: any) => c.name === firstPath).children.push(pathArr.slice(1).join(\"/\"));\n            } else {\n                acc.push({\n                    id: uuid.v4(),\n                    name: firstPath,\n                    fullPath: parentFullPath.length > 0 ? (parentFullPath + \"/\" + firstPath) : firstPath,\n                    children: [\n                        pathArr.slice(1).join(\"/\"),\n                    ],\n                });\n            }\n        } else if (curr.indexOf(\".\") !== -1) {\n            acc.push({\n                id: uuid.v4(),\n                name: curr,\n                fullPath: parentFullPath.length > 0 ? (parentFullPath + \"/\" + curr) : curr,\n            });\n        }\n        return acc;\n    }, []);\n    for (const key in filtered) {\n        if (filtered.hasOwnProperty(key)) {\n            const child = filtered[key];\n            if (Object.keys(child).includes(\"children\")) {\n                child.children = pathStringsToTreeStructure(child.children, child.fullPath);\n            }\n        }\n    }\n    return filtered;\n}\n"],"sourceRoot":""}]}