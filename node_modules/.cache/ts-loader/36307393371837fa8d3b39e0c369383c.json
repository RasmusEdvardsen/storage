{"remainingRequest":"/home/git/homestorage/homeweb/node_modules/babel-loader/lib/index.js!/home/git/homestorage/homeweb/node_modules/ts-loader/index.js??ref--13-2!/home/git/homestorage/homeweb/src/azure/downloadBlob.ts","dependencies":[{"path":"/home/git/homestorage/homeweb/src/azure/downloadBlob.ts","mtime":1586434586906},{"path":"/home/git/homestorage/homeweb/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/git/homestorage/homeweb/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/git/homestorage/homeweb/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/git/homestorage/homeweb/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport { BlobURL, Aborter, ContainerURL } from \"@azure/storage-blob\";\nimport FileSaver from \"file-saver\";\nimport getServiceUrl from \"./serviceUrl\";\nexport default function downloadBlob(_x, _x2, _x3, _x4) {\n  return _downloadBlob.apply(this, arguments);\n}\n\nfunction _downloadBlob() {\n  _downloadBlob = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(containerName, blobNameFull, blobName, saveFile) {\n    var serviceURL, containerURL, blobURL, downloadBlockBlobResponse, blobBody;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return getServiceUrl();\n\n          case 2:\n            serviceURL = _context.sent;\n            containerURL = ContainerURL.fromServiceURL(serviceURL, containerName);\n            blobURL = BlobURL.fromContainerURL(containerURL, blobNameFull);\n            _context.next = 7;\n            return blobURL.download(Aborter.none, 0);\n\n          case 7:\n            downloadBlockBlobResponse = _context.sent;\n            _context.next = 10;\n            return downloadBlockBlobResponse.blobBody;\n\n          case 10:\n            blobBody = _context.sent;\n\n            if (!blobBody) {\n              _context.next = 17;\n              break;\n            }\n\n            if (!saveFile) {\n              _context.next = 16;\n              break;\n            }\n\n            FileSaver.saveAs(blobBody, blobName);\n            _context.next = 17;\n            break;\n\n          case 16:\n            return _context.abrupt(\"return\", blobBody);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _downloadBlob.apply(this, arguments);\n}",{"version":3,"sources":["/home/git/homestorage/homeweb/src/azure/downloadBlob.ts"],"names":[],"mappings":";;AAAA,SACI,OADJ,EAEI,OAFJ,EAII,YAJJ,QAKO,qBALP;AAOA,OAAO,SAAP,MAAsB,YAAtB;AACA,OAAO,aAAP;AAEA,wBAA8B,YAA9B;AAAA;AAAA;;;0EAAe,iBACX,aADW,EAEX,YAFW,EAGX,QAHW,EAIX,QAJW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAM0B,aAAa,EANvC;;AAAA;AAML,YAAA,UANK;AAQL,YAAA,YARK,GAQU,YAAY,CAAC,cAAb,CAA4B,UAA5B,EAAwC,aAAxC,CARV;AASL,YAAA,OATK,GASK,OAAO,CAAC,gBAAR,CAAyB,YAAzB,EAAuC,YAAvC,CATL;AAAA;AAAA,mBAU6B,OAAO,CAAC,QAAR,CAAiB,OAAO,CAAC,IAAzB,EAA+B,CAA/B,CAV7B;;AAAA;AAUL,YAAA,yBAVK;AAAA;AAAA,mBAWY,yBAAyB,CAAC,QAXtC;;AAAA;AAWL,YAAA,QAXK;;AAAA,iBAYP,QAZO;AAAA;AAAA;AAAA;;AAAA,iBAaH,QAbG;AAAA;AAAA;AAAA;;AAaS,YAAA,SAAS,CAAC,MAAV,CAAiB,QAAjB,EAA2B,QAA3B;AAbT;AAAA;;AAAA;AAAA,6CAcI,QAdJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import {\r\n    BlobURL,\r\n    Aborter,\r\n    ServiceURL,\r\n    ContainerURL,\r\n} from \"@azure/storage-blob\";\r\n\r\nimport FileSaver from \"file-saver\";\r\nimport getServiceUrl from \"./serviceUrl\";\r\n\r\nexport default async function downloadBlob(\r\n    containerName: string,\r\n    blobNameFull: string,\r\n    blobName: string,\r\n    saveFile: boolean,\r\n): Promise<Blob | void> {\r\n    const serviceURL: ServiceURL = await getServiceUrl();\r\n\r\n    const containerURL = ContainerURL.fromServiceURL(serviceURL, containerName);\r\n    const blobURL = BlobURL.fromContainerURL(containerURL, blobNameFull);\r\n    const downloadBlockBlobResponse = await blobURL.download(Aborter.none, 0);\r\n    const blobBody = await downloadBlockBlobResponse.blobBody;\r\n    if (blobBody) {\r\n        if (saveFile) { FileSaver.saveAs(blobBody, blobName); } else {\r\n            return blobBody;\n        }\n    }\r\n}\r\n"],"sourceRoot":""}]}