{"remainingRequest":"/home/git/homestorage/homeweb/node_modules/babel-loader/lib/index.js!/home/git/homestorage/homeweb/node_modules/ts-loader/index.js??ref--13-2!/home/git/homestorage/homeweb/src/azure/uploadFile.ts","dependencies":[{"path":"/home/git/homestorage/homeweb/src/azure/uploadFile.ts","mtime":1586434586906},{"path":"/home/git/homestorage/homeweb/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/git/homestorage/homeweb/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/git/homestorage/homeweb/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/git/homestorage/homeweb/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport { BlobURL, BlockBlobURL, Aborter, ContainerURL } from \"@azure/storage-blob\";\nimport { error } from \"@/log/log\";\nimport getServiceUrl from \"./serviceUrl\";\nexport function uploadFileWithCallback(_x, _x2, _x3, _x4) {\n  return _uploadFileWithCallback.apply(this, arguments);\n}\n\nfunction _uploadFileWithCallback() {\n  _uploadFileWithCallback = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(containerName, fileName, file, cb) {\n    var serviceURL, containerURL, blobURL, blockBlobURL, uploadBlobResponse;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return getServiceUrl();\n\n          case 3:\n            serviceURL = _context.sent;\n            containerURL = ContainerURL.fromServiceURL(serviceURL, containerName);\n            blobURL = BlobURL.fromContainerURL(containerURL, fileName);\n            blockBlobURL = BlockBlobURL.fromBlobURL(blobURL);\n            _context.next = 9;\n            return blockBlobURL.upload(Aborter.none, file, file.size, {\n              blobHTTPHeaders: {\n                blobContentType: file.type\n              },\n              progress: cb\n            });\n\n          case 9:\n            uploadBlobResponse = _context.sent;\n            return _context.abrupt(\"return\", uploadBlobResponse._response.status);\n\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context[\"catch\"](0);\n            error(\"error: \" + JSON.stringify(_context.t0));\n            return _context.abrupt(\"return\", 500);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 13]]);\n  }));\n  return _uploadFileWithCallback.apply(this, arguments);\n}",{"version":3,"sources":["/home/git/homestorage/homeweb/src/azure/uploadFile.ts"],"names":[],"mappings":";;AAAA,SACI,OADJ,EAEI,YAFJ,EAGI,OAHJ,EAII,YAJJ,QAMO,qBANP;AAOA,SAAS,KAAT,QAAsB,WAAtB;AAEA,OAAO,aAAP;AAEA,gBAAsB,sBAAtB;AAAA;AAAA;;;oFAAO,iBACH,aADG,EAEH,QAFG,EAGH,IAHG,EAIH,EAJG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAOsC,aAAa,EAPnD;;AAAA;AAOO,YAAA,UAPP;AAQO,YAAA,YARP,GAQsB,YAAY,CAAC,cAAb,CAA4B,UAA5B,EAAwC,aAAxC,CARtB;AASO,YAAA,OATP,GASiB,OAAO,CAAC,gBAAR,CAAyB,YAAzB,EAAuC,QAAvC,CATjB;AAUO,YAAA,YAVP,GAUsB,YAAY,CAAC,WAAb,CAAyB,OAAzB,CAVtB;AAAA;AAAA,mBAWkC,YAAY,CAAC,MAAb,CAC7B,OAAO,CAAC,IADqB,EAE7B,IAF6B,EAG7B,IAAI,CAAC,IAHwB,EAI7B;AACI,cAAA,eAAe,EAAE;AAAE,gBAAA,eAAe,EAAE,IAAI,CAAC;AAAxB,eADrB;AAEI,cAAA,QAAQ,EAAE;AAFd,aAJ6B,CAXlC;;AAAA;AAWO,YAAA,kBAXP;AAAA,6CAoBQ,kBAAkB,CAAC,SAAnB,CAA6B,MApBrC;;AAAA;AAAA;AAAA;AAsBC,YAAA,KAAK,CAAC,YAAY,IAAI,CAAC,SAAL,aAAb,CAAL;AAtBD,6CAuBQ,GAvBR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import {\r\n    BlobURL,\r\n    BlockBlobURL,\r\n    Aborter,\r\n    ContainerURL,\r\n    ServiceURL,\r\n} from \"@azure/storage-blob\";\r\nimport { error } from \"@/log/log\";\r\nimport { TransferProgressEvent } from \"@azure/ms-rest-js\";\r\nimport getServiceUrl from \"./serviceUrl\";\r\n\r\nexport async function uploadFileWithCallback(\r\n    containerName: string,\r\n    fileName: string,\r\n    file: File,\r\n    cb: (e: TransferProgressEvent) => void,\r\n): Promise<number> {\r\n    try {\r\n        const serviceURL: ServiceURL = await getServiceUrl();\r\n        const containerURL = ContainerURL.fromServiceURL(serviceURL, containerName);\r\n        const blobURL = BlobURL.fromContainerURL(containerURL, fileName);\r\n        const blockBlobURL = BlockBlobURL.fromBlobURL(blobURL);\r\n        const uploadBlobResponse = await blockBlobURL.upload(\r\n            Aborter.none,\r\n            file,\r\n            file.size,\r\n            {\r\n                blobHTTPHeaders: { blobContentType: file.type },\r\n                progress: cb,\r\n            },\r\n        );\r\n        return uploadBlobResponse._response.status;\r\n    } catch (err) {\r\n        error(\"error: \" + JSON.stringify(err));\r\n        return 500;\r\n    }\r\n}\r\n"],"sourceRoot":""}]}