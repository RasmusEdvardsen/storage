{"remainingRequest":"/home/git/homestorage/homeweb/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/git/homestorage/homeweb/src/generic/modal.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/home/git/homestorage/homeweb/src/generic/modal.vue","mtime":1586434586906},{"path":"/home/git/homestorage/homeweb/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/git/homestorage/homeweb/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/git/homestorage/homeweb/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/home/git/homestorage/homeweb/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/git/homestorage/homeweb/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\nimport Vue from \"vue\";\nimport { Component, Prop, Watch } from \"vue-property-decorator\";\n\n@Component\nexport default class Modal extends Vue {\n  @Prop({ type: Boolean, default: false })\n  public toggle!: boolean;\n\n  @Prop({ type: Boolean, default: false })\n  public blocking!: boolean;\n\n  public t: boolean = false;\n\n  @Watch(\"toggle\")\n  public onToggleChanged(value: boolean) {\n    this.t = value;\n  }\n\n  public overlayClicked() {\n    if (!this.blocking) {\n      this.$emit(\"input\", !this.t);\n    } else {\n      return;\n    }\n  }\n}\n",{"version":3,"sources":["modal.vue"],"names":[],"mappings":";;;;;;;;;;;AAWA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"modal.vue","sourceRoot":"src/generic","sourcesContent":["<template>\n  <div class=\"modal\">\n    <div :class=\"['modal-content', t ? 'expanded' : '']\">\n      <slot name=\"content\"></slot>\n    </div>\n    <!-- should be 2 overlays - one colored, one not -->\n    <div :class=\"['overlay', t ? 'expanded' : '']\" @click.stop=\"overlayClicked()\"></div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport Vue from \"vue\";\nimport { Component, Prop, Watch } from \"vue-property-decorator\";\n\n@Component\nexport default class Modal extends Vue {\n  @Prop({ type: Boolean, default: false })\n  public toggle!: boolean;\n\n  @Prop({ type: Boolean, default: false })\n  public blocking!: boolean;\n\n  public t: boolean = false;\n\n  @Watch(\"toggle\")\n  public onToggleChanged(value: boolean) {\n    this.t = value;\n  }\n\n  public overlayClicked() {\n    if (!this.blocking) {\n      this.$emit(\"input\", !this.t);\n    } else {\n      return;\n    }\n  }\n}\n</script>\n\n<style scoped>\n.modal {\n  display: inline-block;\n}\n\n.modal-content {\n  display: none;\n  position: absolute;\n  top: 0;\n  left: 0;\n  background-color: #f9f9f9;\n  min-width: 160px;\n  padding: 10px;\n  z-index: 10;\n  border-radius: 2px;\n  border: 1px solid gainsboro;\n\n  -webkit-box-shadow: 2px 2px 4px 0px rgba(0, 0, 0, 0.5);\n  -moz-box-shadow: 2px 2px 4px 0px rgba(0, 0, 0, 0.5);\n  box-shadow: 2px 2px 4px 0px rgba(0, 0, 0, 0.5);\n}\n\n.modal .modal-content.expanded {\n  display: block;\n  width: 60%;\n  height: 40%;\n  left: 20%;\n  top: 30%;\n}\n\n.overlay {\n  display: none;\n}\n\n.overlay.expanded {\n  display: inline-block;\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  z-index: 9;\n}\n</style>\n"]}]}