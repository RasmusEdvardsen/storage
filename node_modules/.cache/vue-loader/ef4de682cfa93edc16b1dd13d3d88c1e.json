{"remainingRequest":"/home/git/homestorage/homeweb/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/git/homestorage/homeweb/src/homestorage/components/previewWrapper.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/home/git/homestorage/homeweb/src/homestorage/components/previewWrapper.vue","mtime":1586434586906},{"path":"/home/git/homestorage/homeweb/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/git/homestorage/homeweb/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/git/homestorage/homeweb/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/home/git/homestorage/homeweb/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/git/homestorage/homeweb/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\nimport Vue from \"vue\";\r\nimport { Component, Watch } from \"vue-property-decorator\";\r\nimport { Action, Getter } from \"vuex-class\";\r\n\r\nimport { BlobItem } from \"@azure/storage-blob/typings/src/generated/src/models\"; // src/generated/src/models\";\r\nimport downloadBlob from \"@/azure/downloadBlob\";\r\n\r\nimport { name } from \"../utils/arrUtils\";\r\nimport { post } from \"../../web/web\";\r\n\r\nimport { user } from \"../../auth/user\";\r\n\r\nconst namespace = \"homeStorage\";\r\n@Component\r\nexport default class PreviewWrapper extends Vue {\r\n  @Getter(\"activeBlob\", { namespace })\r\n  public activeBlob!: BlobItem;\r\n\r\n  public previewUrl: string = \"\";\r\n  public showPreview: boolean = true;\r\n\r\n  @Watch(\"activeBlob\", { deep: true })\r\n  public async onActiveBlobChanged(value: BlobItem | null) {\r\n    this.previewUrl = \"\";\r\n\r\n    if (value === null) {\r\n      return;\r\n    }\r\n\r\n    this.showPreview = false;\r\n    await this.$nextTick();\r\n    this.showPreview = true;\r\n\r\n    const blobStorageUrl =\r\n      \"https://storageanarae.blob.core.windows.net/homestorage\";\r\n    const namePath = \"/\" + value.name;\r\n\r\n    const src = blobStorageUrl + namePath;\r\n    const options = {\r\n      headers: {\r\n        \"authorization\": \"Bearer \" + (await user.accessToken()),\r\n        \"x-ms-version\": \"2019-02-02\",\r\n      },\r\n    };\r\n\r\n    fetch(src, options)\r\n      .then((res) => res.blob())\r\n      .then((blob) => {\r\n        this.previewUrl = URL.createObjectURL(blob);\r\n      });\r\n  }\r\n\r\n  // put into util file\r\n  get activeBlobFileType(): string {\r\n    if (this.activeBlob === null || !this.activeBlob.properties.contentType) {\r\n      return \"\";\r\n    }\r\n    const type: string = this.activeBlob.properties.contentType;\r\n    if (type.includes(\"image\")) {\r\n      return \"image\";\r\n    }\r\n    if (type.includes(\"video\")) {\r\n      return \"video\";\r\n    } else {\r\n      return \"\";\r\n    }\r\n  }\r\n\r\n  public async download(blob: BlobItem): Promise<void> {\r\n    if (!blob) {\r\n      return;\r\n    }\r\n\r\n    downloadBlob(\"homestorage\", blob.name, this.name(blob.name), true);\r\n  }\r\n\r\n  public name(str: string): string {\r\n    return name(str);\r\n  }\r\n}\r\n",{"version":3,"sources":["previewWrapper.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAqBA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA","file":"previewWrapper.vue","sourceRoot":"src/homestorage/components","sourcesContent":["<template>\r\n  <div id=\"preview-wrapper\" v-if=\"activeBlob && previewUrl.length > 0\">\r\n    <div class>{{name(activeBlob.name)}}</div>\r\n    <div class=\"file-info\">\r\n      <div class=\"content-type\">{{activeBlob.properties.contentType}}</div>\r\n      <div class=\"download\" @click=\"download(activeBlob)\">download</div>\r\n    </div>\r\n    <div class=\"preview\" v-if=\"showPreview\">\r\n      <video v-if=\"activeBlobFileType === 'video'\" width=\"100%\" height=\"100%\" controls>\r\n        <source :src=\"previewUrl\" />\r\n      </video>\r\n      <img v-else-if=\"activeBlobFileType === 'image'\" id=\"viewurl\" :src=\"previewUrl\" alt />\r\n      <div v-else class=\"empty\"></div>\r\n    </div>\r\n  </div>\r\n  <div class=\"no-file-selected\" v-else>\r\n    <div class=\"text\">no file selected</div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport Vue from \"vue\";\r\nimport { Component, Watch } from \"vue-property-decorator\";\r\nimport { Action, Getter } from \"vuex-class\";\r\n\r\nimport { BlobItem } from \"@azure/storage-blob/typings/src/generated/src/models\"; // src/generated/src/models\";\r\nimport downloadBlob from \"@/azure/downloadBlob\";\r\n\r\nimport { name } from \"../utils/arrUtils\";\r\nimport { post } from \"../../web/web\";\r\n\r\nimport { user } from \"../../auth/user\";\r\n\r\nconst namespace = \"homeStorage\";\r\n@Component\r\nexport default class PreviewWrapper extends Vue {\r\n  @Getter(\"activeBlob\", { namespace })\r\n  public activeBlob!: BlobItem;\r\n\r\n  public previewUrl: string = \"\";\r\n  public showPreview: boolean = true;\r\n\r\n  @Watch(\"activeBlob\", { deep: true })\r\n  public async onActiveBlobChanged(value: BlobItem | null) {\r\n    this.previewUrl = \"\";\r\n\r\n    if (value === null) {\r\n      return;\r\n    }\r\n\r\n    this.showPreview = false;\r\n    await this.$nextTick();\r\n    this.showPreview = true;\r\n\r\n    const blobStorageUrl =\r\n      \"https://storageanarae.blob.core.windows.net/homestorage\";\r\n    const namePath = \"/\" + value.name;\r\n\r\n    const src = blobStorageUrl + namePath;\r\n    const options = {\r\n      headers: {\r\n        \"authorization\": \"Bearer \" + (await user.accessToken()),\r\n        \"x-ms-version\": \"2019-02-02\",\r\n      },\r\n    };\r\n\r\n    fetch(src, options)\r\n      .then((res) => res.blob())\r\n      .then((blob) => {\r\n        this.previewUrl = URL.createObjectURL(blob);\r\n      });\r\n  }\r\n\r\n  // put into util file\r\n  get activeBlobFileType(): string {\r\n    if (this.activeBlob === null || !this.activeBlob.properties.contentType) {\r\n      return \"\";\r\n    }\r\n    const type: string = this.activeBlob.properties.contentType;\r\n    if (type.includes(\"image\")) {\r\n      return \"image\";\r\n    }\r\n    if (type.includes(\"video\")) {\r\n      return \"video\";\r\n    } else {\r\n      return \"\";\r\n    }\r\n  }\r\n\r\n  public async download(blob: BlobItem): Promise<void> {\r\n    if (!blob) {\r\n      return;\r\n    }\r\n\r\n    downloadBlob(\"homestorage\", blob.name, this.name(blob.name), true);\r\n  }\r\n\r\n  public name(str: string): string {\r\n    return name(str);\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n#preview-wrapper {\r\n  margin: 20px;\r\n}\r\n#preview-wrapper > .preview > * {\r\n  max-width: 100%;\r\n  max-height: 100%;\r\n}\r\n.no-file-selected {\r\n  height: calc(100% - 40px);\r\n\r\n  margin: 20px;\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  background: lightgrey;\r\n}\r\n</style>\r\n"]}]}