{"remainingRequest":"/home/git/homestorage/homeweb/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/git/homestorage/homeweb/src/homestorage/components/treeItem.vue?vue&type=style&index=0&id=a8656e16&scoped=true&lang=css&","dependencies":[{"path":"/home/git/homestorage/homeweb/src/homestorage/components/treeItem.vue","mtime":1586434586906},{"path":"/home/git/homestorage/homeweb/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/git/homestorage/homeweb/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/git/homestorage/homeweb/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/git/homestorage/homeweb/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/git/homestorage/homeweb/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.item {\r\n  display: table;\r\n}\r\n.item .item-icon,\r\n.item .item-name {\r\n  display: inline;\r\n}\r\n.item-name.active {\r\n  background-color: #5c768c;\r\n  color: white;\r\n  border-radius: 20px;\r\n  padding: 2px 20px;\r\n}\r\n.option {\r\n  position: relative;\r\n  overflow: hidden;\r\n}\r\n\r\n.option:not(:last-child) {\r\n  padding-bottom: 10px;\r\n  margin-bottom: 10px;\r\n\r\n  border-bottom: 1px solid gainsboro;\r\n}\r\n\r\n.option input[type=\"file\"] {\r\n  font-size: 100px;\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  opacity: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n.option:hover {\r\n  cursor: pointer;\r\n}\r\n",{"version":3,"sources":["treeItem.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"treeItem.vue","sourceRoot":"src/homestorage/components","sourcesContent":["<template>\r\n  <li>\r\n    <div class=\"item mb-5\" v-if=\"item.name !== 'dummy.txt'\" @click=\"itemClick(item)\" @contextmenu.prevent=\"toggle=true\">\r\n      <div :class=\"[icon, 'item-icon', 'mr-10', 'ml-10']\"></div>\r\n      <input\r\n        ref=\"fileNameInput\"\r\n        v-if=\"showNewFileInput\"\r\n        v-model=\"newFileName\"\r\n        type=\"text\"\r\n        @blur=\"showNewFileInput=false\"\r\n        @keyup.enter=\"newFileNameEntered()\"\r\n        placeholder=\"New file name\"\r\n      />\r\n      <div :class=\"['item-name', 'mr-10', 'ml-10', isActive]\" v-else>{{ item.name }}</div>\r\n      <div\r\n        :class=\"toggle ? 'far fa-minus-square' : 'far fa-plus-square'\"\r\n        @click.stop=\"toggle=!toggle\"\r\n      ></div>\r\n      <dropdown :toggle=\"toggle\" v-model=\"toggle\">\r\n        <div slot=\"content\" v-if=\"!isFolder\">\r\n          <div class=\"option\" @click.stop=\"rename(item)\">Rename</div>\r\n          <div class=\"option\" @click.stop=\"del(item)\">Delete</div>\r\n        </div>\r\n        <div slot=\"content\" v-else>\r\n          <div class=\"option\" @click.stop=\"newFolderOption\">New folder</div>\r\n          <div class=\"option\" @click.stop>\r\n            <div class=\"file-click\">New file(s)</div>\r\n            <!-- @change only fires when different file uploaded. -->\r\n            <input type=\"file\" id=\"new-file\" @change=\"newFilesSelected($event)\" multiple />\r\n          </div>\r\n        </div>\r\n      </dropdown>\r\n    </div>\r\n    <ul v-show=\"isOpen\" v-if=\"isFolder\">\r\n      <tree-item class=\"item\" v-for=\"(child, index) in item.children\" :key=\"index\" :item=\"child\"></tree-item>\r\n    </ul>\r\n    <input\r\n      ref=\"folderNameInput\"\r\n      v-if=\"showFolderInput\"\r\n      v-model=\"folderName\"\r\n      type=\"text\"\r\n      @blur=\"showFolderInput=false\"\r\n      @keyup.enter=\"newFolderEntered()\"\r\n      placeholder=\"Folder name\"\r\n    />\r\n  </li>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport Vue from \"vue\";\r\nimport { Component, Prop, Watch } from \"vue-property-decorator\";\r\n\r\nimport { Action, Getter } from \"vuex-class\";\r\n\r\nimport { BlobItem } from \"@azure/storage-blob/typings/src/generated/src/models\";\r\n\r\nimport Dropdown from \"@/generic/dropdown.vue\";\r\n\r\nimport * as log from \"@/log/log\";\r\n\r\nimport {\r\n  EventBus,\r\n  Event as CustomEvents,\r\n  IEventNewFiles,\r\n} from \"@/homestorage/eventBus.ts\";\r\n\r\nconst namespace = \"homeStorage\";\r\n\r\n@Component({\r\n  name: \"tree-item\",\r\n  components: {\r\n    dropdown: Dropdown,\r\n  },\r\n})\r\nexport default class TreeItem extends Vue {\r\n  @Prop() public item!: any;\r\n  @Action(\"setActiveBlob\", { namespace }) public setActiveBlob: any;\r\n  @Action(\"getBlobsByContainer\", { namespace }) public getBlobsByContainer: any;\r\n  @Action(\"createFolder\", { namespace }) public createFolder: any;\r\n  @Action(\"renameFile\", { namespace }) public renameFile: any;\r\n  @Action(\"deleteFile\", { namespace }) public deleteFile: any;\r\n  @Getter(\"activeBlob\", { namespace }) public activeBlob!: BlobItem;\r\n\r\n  public isOpen: boolean = false;\r\n  public toggle: boolean = false;\r\n\r\n  public showFolderInput: boolean = false;\r\n  public showNewFileInput: boolean = false;\r\n\r\n  public folderName: string = \"\";\r\n  public newFileName: string = \"\";\r\n\r\n  public $refs!: {\r\n    folderNameInput: HTMLInputElement;\r\n    fileNameInput: HTMLInputElement;\r\n  };\r\n\r\n  get isFolder(): boolean {\r\n    return this.item.children && this.item.children.length;\r\n  }\r\n\r\n  get icon(): string {\r\n    const str =\r\n      \"far \" +\r\n      (this.isFolder\r\n        ? this.isOpen\r\n          ? \"fa-folder-open\"\r\n          : \"fa-folder\"\r\n        : \" fa-file\");\r\n    return str;\r\n  }\r\n\r\n  get isActive() {\r\n    return this.activeBlob && this.activeBlob.name === this.item.fullPath\r\n      ? \"active\"\r\n      : \"\";\r\n  }\r\n\r\n  public itemClick(item: any) {\r\n    if (this.isFolder) {\r\n      this.isOpen = !this.isOpen;\r\n    } else if (item.fullPath) {\r\n      this.setActiveBlob(item.fullPath);\r\n    }\r\n  }\r\n\r\n  public async rename(item: any) {\r\n    this.toggle = false;\r\n    this.showNewFileInput = true;\r\n    this.focusOnInput(\"fileNameInput\");\r\n  }\r\n\r\n  public async del(item: any) {\r\n    this.toggle = false;\r\n    if (confirm(`Really delete ${item.name}?`)) {\r\n      await this.deleteFile({ containerName: \"homestorage\", name: item.fullPath });\r\n      await this.getBlobsByContainer(\"homestorage\");\r\n    }\r\n  }\r\n\r\n  public async newFileNameEntered() {\r\n    this.showNewFileInput = false;\r\n    if (this.newFileName.length < 1 && !this.item.fullPath) {\r\n      return;\r\n    }\r\n    const fullPath: string = this.item.fullPath;\r\n    const path: string = fullPath\r\n      .split(\"/\")\r\n      .slice(0, -1)\r\n      .join(\"/\");\r\n    const extensionArr = (this.item.name as string).split(\".\");\r\n    const extension = extensionArr[extensionArr.length - 1];\r\n    const fileName =\r\n      path.length > 0\r\n        ? path + \"/\" + this.newFileName + \".\" + extension\r\n        : this.newFileName + \".\" + extension;\r\n    const oldName = this.item.fullPath || this.item.name;\r\n    const newName = fileName;\r\n    await this.renameFile({ containerName: \"homestorage\", oldName, newName });\r\n    await this.getBlobsByContainer(\"homestorage\");\r\n    this.showNewFileInput = false;\r\n    this.newFileName = \"\";\r\n  }\r\n\r\n  public async newFolderOption() {\r\n    this.closeContextMenuAndOpenFolder();\r\n    this.showFolderInput = true;\r\n    this.focusOnInput(\"folderNameInput\");\r\n  }\r\n\r\n  public async newFolderEntered() {\r\n    const fullPath: string = this.item.fullPath;\r\n    if (this.folderName.length < 1 && !this.item.fullPath) {\r\n      return;\r\n    }\r\n    const folderName =\r\n      fullPath.length > 0 ? fullPath + \"/\" + this.folderName : this.folderName;\r\n    await this.createFolder({ containerName: \"homestorage\", folderName });\r\n    await this.getBlobsByContainer(\"homestorage\");\r\n    this.showFolderInput = false;\r\n    this.folderName = \"\";\r\n  }\r\n\r\n  public async newFilesSelected(e: Event): Promise<void> {\r\n    this.closeContextMenuAndOpenFolder();\r\n\r\n    const fileList = (e.target as HTMLInputElement).files;\r\n    if (!fileList || fileList.length < 1) {\r\n      return;\r\n    }\r\n    if (!this.item.fullPath) {\r\n      return;\r\n    }\r\n\r\n    const newFiles: IEventNewFiles = {\r\n      fileList,\r\n      folderPath: this.item.fullPath,\r\n    };\r\n    EventBus.$emit(CustomEvents.NEWFILES, newFiles);\r\n\r\n    return;\r\n  }\r\n\r\n  public async focusOnInput(ref: string) {\r\n    await this.$nextTick();\r\n    try {\r\n      const keyVal = Object.entries(this.$refs).find((x) => x[0] === ref);\r\n      if (!keyVal) {\r\n        return;\r\n      }\r\n      const input: HTMLInputElement = keyVal[1];\r\n      input.focus();\r\n    } catch (error) {\r\n      return;\r\n    }\r\n  }\r\n\r\n  public closeContextMenuAndOpenFolder() {\r\n    this.toggle = false;\r\n    this.isOpen = true;\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.item {\r\n  display: table;\r\n}\r\n.item .item-icon,\r\n.item .item-name {\r\n  display: inline;\r\n}\r\n.item-name.active {\r\n  background-color: #5c768c;\r\n  color: white;\r\n  border-radius: 20px;\r\n  padding: 2px 20px;\r\n}\r\n.option {\r\n  position: relative;\r\n  overflow: hidden;\r\n}\r\n\r\n.option:not(:last-child) {\r\n  padding-bottom: 10px;\r\n  margin-bottom: 10px;\r\n\r\n  border-bottom: 1px solid gainsboro;\r\n}\r\n\r\n.option input[type=\"file\"] {\r\n  font-size: 100px;\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  opacity: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n.option:hover {\r\n  cursor: pointer;\r\n}\r\n</style>\r\n"]}]}