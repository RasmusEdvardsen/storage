{"remainingRequest":"/home/git/homestorage/homeweb/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/git/homestorage/homeweb/src/homestorage/components/uploadFilesProgress.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/home/git/homestorage/homeweb/src/homestorage/components/uploadFilesProgress.vue","mtime":1586434586906},{"path":"/home/git/homestorage/homeweb/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/git/homestorage/homeweb/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/git/homestorage/homeweb/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/home/git/homestorage/homeweb/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/git/homestorage/homeweb/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\r\nimport Vue from \"vue\";\r\nimport { Component, Watch } from \"vue-property-decorator\";\r\n\r\nimport { Action } from \"vuex-class\";\r\n\r\nimport Modal from \"@/generic/modal.vue\";\r\nimport { TransferProgressEvent } from \"@azure/ms-rest-js\";\r\n\r\nconst namespace = \"homeStorage\";\r\n\r\n@Component({\r\n  components: {\r\n    modal: Modal,\r\n  },\r\n})\r\nexport default class UploadFilesProgress extends Vue {\r\n  @Action(\"uploadFile\", { namespace })\r\n  public uploadFile: any;\r\n\r\n  public toggle: boolean = false;\r\n\r\n  public isUploading = false;\r\n\r\n  public numFiles: number = 0;\r\n  public numFilesUploaded: number = 0;\r\n  public currentFile: File = new File([], \"\");\r\n  public currentFileProgress: number = 0;\r\n\r\n  public clearAndClose() {\r\n    this.toggle = false;\r\n    this.numFiles = 0;\r\n    this.numFilesUploaded = 0;\r\n    this.currentFile = new File([], \"\");\r\n  }\r\n\r\n  public async openAndShowProgress(\r\n    fileList: FileList,\r\n    folderPath: string,\r\n  ): Promise<void> {\r\n    const numFiles = fileList.length;\r\n\r\n    (this.toggle = true), (this.numFiles = numFiles), (this.isUploading = true);\r\n    try {\r\n      for (let idx = 0; idx < fileList.length; idx++) {\r\n        const file = fileList.item(idx);\r\n        if (!file) {\r\n          return;\r\n        }\r\n\r\n        const fileName =\r\n          folderPath.length > 0 ? folderPath + \"/\" + file.name : file.name;\r\n\r\n        this.currentFile = file;\r\n\r\n        const uploaded = await this.uploadFile({\r\n          containerName: \"homestorage\",\r\n          fileName,\r\n          file,\r\n          cb: (progress: TransferProgressEvent) => {\r\n            this.currentFileProgress = Math.floor(\r\n              (progress.loadedBytes / file.size) * 100,\r\n            );\r\n          },\r\n        });\r\n        if (uploaded === 200 || uploaded === 201) {\r\n          this.numFilesUploaded++;\r\n        }\r\n      }\r\n      this.isUploading = false;\r\n      return;\r\n    } catch (error) {\r\n      return;\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["uploadFilesProgress.vue"],"names":[],"mappings":";;;;;;;;;;;;;AAaA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"uploadFilesProgress.vue","sourceRoot":"src/homestorage/components","sourcesContent":["<template>\r\n  <modal class=\"upload-files-progress\" :toggle=\"toggle\" v-model=\"toggle\" :blocking=\"true\">\r\n    <div slot=\"content\">\r\n      <div class=\"num-file\">Number of files to upload: {{numFiles}}</div>\r\n      <div class=\"num-files-uploaded\">Number of files uploaded: {{numFilesUploaded}}</div>\r\n      <div class=\"current-file\">Name of current file: {{currentFile.name}}</div>\r\n      <div class=\"current-file-progress\">Upload status: {{currentFileProgress}}%</div>\r\n      <button class=\"btn\" :disabled=\"isUploading\" @click=\"clearAndClose\">Close</button>\r\n    </div>\r\n  </modal>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport Vue from \"vue\";\r\nimport { Component, Watch } from \"vue-property-decorator\";\r\n\r\nimport { Action } from \"vuex-class\";\r\n\r\nimport Modal from \"@/generic/modal.vue\";\r\nimport { TransferProgressEvent } from \"@azure/ms-rest-js\";\r\n\r\nconst namespace = \"homeStorage\";\r\n\r\n@Component({\r\n  components: {\r\n    modal: Modal,\r\n  },\r\n})\r\nexport default class UploadFilesProgress extends Vue {\r\n  @Action(\"uploadFile\", { namespace })\r\n  public uploadFile: any;\r\n\r\n  public toggle: boolean = false;\r\n\r\n  public isUploading = false;\r\n\r\n  public numFiles: number = 0;\r\n  public numFilesUploaded: number = 0;\r\n  public currentFile: File = new File([], \"\");\r\n  public currentFileProgress: number = 0;\r\n\r\n  public clearAndClose() {\r\n    this.toggle = false;\r\n    this.numFiles = 0;\r\n    this.numFilesUploaded = 0;\r\n    this.currentFile = new File([], \"\");\r\n  }\r\n\r\n  public async openAndShowProgress(\r\n    fileList: FileList,\r\n    folderPath: string,\r\n  ): Promise<void> {\r\n    const numFiles = fileList.length;\r\n\r\n    (this.toggle = true), (this.numFiles = numFiles), (this.isUploading = true);\r\n    try {\r\n      for (let idx = 0; idx < fileList.length; idx++) {\r\n        const file = fileList.item(idx);\r\n        if (!file) {\r\n          return;\r\n        }\r\n\r\n        const fileName =\r\n          folderPath.length > 0 ? folderPath + \"/\" + file.name : file.name;\r\n\r\n        this.currentFile = file;\r\n\r\n        const uploaded = await this.uploadFile({\r\n          containerName: \"homestorage\",\r\n          fileName,\r\n          file,\r\n          cb: (progress: TransferProgressEvent) => {\r\n            this.currentFileProgress = Math.floor(\r\n              (progress.loadedBytes / file.size) * 100,\r\n            );\r\n          },\r\n        });\r\n        if (uploaded === 200 || uploaded === 201) {\r\n          this.numFilesUploaded++;\r\n        }\r\n      }\r\n      this.isUploading = false;\r\n      return;\r\n    } catch (error) {\r\n      return;\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n</style>\r\n"]}]}